// Code generated by MockGen. DO NOT EDIT.
// Source: hub.go

// Package prelude is a generated GoMock package.
package prelude

import (
	reflect "reflect"

	v2 "github.com/cloudevents/sdk-go/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockHuber is a mock of Huber interface.
type MockHuber struct {
	ctrl     *gomock.Controller
	recorder *MockHuberMockRecorder
}

// MockHuberMockRecorder is the mock recorder for MockHuber.
type MockHuberMockRecorder struct {
	mock *MockHuber
}

// NewMockHuber creates a new mock instance.
func NewMockHuber(ctrl *gomock.Controller) *MockHuber {
	mock := &MockHuber{ctrl: ctrl}
	mock.recorder = &MockHuberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHuber) EXPECT() *MockHuberMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockHuber) Publish(topic string, event v2.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", topic, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockHuberMockRecorder) Publish(topic, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockHuber)(nil).Publish), topic, event)
}

// QueueSubscribe mocks base method.
func (m *MockHuber) QueueSubscribe(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribe", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueSubscribe indicates an expected call of QueueSubscribe.
func (mr *MockHuberMockRecorder) QueueSubscribe(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribe", reflect.TypeOf((*MockHuber)(nil).QueueSubscribe), topic)
}

// Router mocks base method.
func (m *MockHuber) Router() *Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Router")
	ret0, _ := ret[0].(*Router)
	return ret0
}

// Router indicates an expected call of Router.
func (mr *MockHuberMockRecorder) Router() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Router", reflect.TypeOf((*MockHuber)(nil).Router))
}

// SetRouter mocks base method.
func (m *MockHuber) SetRouter(router *Router) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRouter", router)
}

// SetRouter indicates an expected call of SetRouter.
func (mr *MockHuberMockRecorder) SetRouter(router interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRouter", reflect.TypeOf((*MockHuber)(nil).SetRouter), router)
}
